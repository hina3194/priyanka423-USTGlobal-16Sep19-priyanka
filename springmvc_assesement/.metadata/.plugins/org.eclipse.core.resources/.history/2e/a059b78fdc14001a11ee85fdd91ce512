package com.ustglobal.retailer.controller;

@Controller
public class RetailerController {

	
		@Autowired
		private EmployeeService service;

		@InitBinder
		public void initBinder(WebDataBinder binder) {
			SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
			CustomDateEditor editor=new CustomDateEditor(format, true);
			binder.registerCustomEditor(Date.class, editor);
		}

		@GetMapping("/login")
		public String loginPgae() {
			return "login";
		}// end of login page


		@PostMapping("/login")
		public String login(int id, String password, // here it will pass the same name of html page's name
				HttpServletRequest request) {
			EmployeeBean bean=service.login(id, password);
			if(bean==null) {
				request.setAttribute("msg", "Invaid Credentials");
				return "login";
			}else {
				HttpSession session=request.getSession();
				session.setAttribute("bean",bean);
				return "home";
			}


		}// end of login()

		@GetMapping("/register")
		public String registerPage() {
			return "register";

		}// end of register page


		@PostMapping("/register")
		public String register(EmployeeBean bean, ModelMap map) {
			int check=service.register(bean);
			if(check>0) {
				map.addAttribute("msg","You are Registered and Id is "+check);
			}else {
				map.addAttribute("msg","Email is Required");
			}
			return "login";
		}// end of register()

		@GetMapping("/home")
		public String home(ModelMap map,
				@SessionAttribute(name="bean", required=false) EmployeeBean bean) {
			if(bean==null) {
				map.addAttribute("msg","Login First!!!");
				return "login";
			}else {
				return "home";
			}

		}// end of home()

		@PostMapping("/home")
		public String home() {
			return "home";

		}// end of home()

		@GetMapping("/search")
		public String search(@RequestParam("id") int id,
				ModelMap map) {
			EmployeeBean bean=service.searchEmployee(id);
			if(bean==null) {
				map.addAttribute("msg","Data Not Found");
			}else {
				map.addAttribute("bean",bean);
			}
			return "home";

		}// end of search()

		@GetMapping("/logout")
		public String logout(HttpSession session) {
			session.invalidate();
			return "login";
		}// end of logout

		@GetMapping("/delete")
		public String deleteProfile(HttpSession session) {
			EmployeeBean bean=(EmployeeBean)session.getAttribute("bean");
			try {
				service.deleteEmployee(bean.getId());
			}catch(Exception e) {
				e.printStackTrace();
			}
			session.invalidate();
			return "login";
		}// end of deleteProfile()


		@GetMapping("/changepassword")
		public String changePassword(HttpServletRequest request) {
			HttpSession session=request.getSession(false);
			if(session!=null) {
				return "changepassword";
			}else {
				return "login";
			}
		}// end of chnagePassword()


		@PostMapping("/changepassword")
		public String changePassword(String password, String confirmpassword,
				@SessionAttribute(name="bean")EmployeeBean bean,
				ModelMap map) {
			if(password.equals(confirmpassword)) {
				service.changePassword(bean.getId(), password);
				map.addAttribute("msg","password Changed");
			}else {
				map.addAttribute("msg","Password Nao Matching");
			}
			return "home";
		}// end of chnagepassword()

		@GetMapping("/update")
		public String update(HttpServletRequest request) {
			HttpSession session=request.getSession(false);
			if(session!=null) {
				return "update";
			}else {
				return "login";
			}
		}// end of updateProfile()

		@PostMapping("/update")
		public String update(String name, String password, Date doj, String gender,
				@SessionAttribute(name="bean")EmployeeBean bean,
				ModelMap map) {

			EmployeeBean bean3=new EmployeeBean();
			bean3.setId(bean.getId());
			bean3.setName(name);
			bean3.setPassword(password);
			bean3.setDoj(doj);
			bean3.setGender(gender);
			boolean check=service.updateEmployee(bean3);
			if(check) {
				map.addAttribute("msg","Update Successfully");
			}else {
				map.addAttribute("msg","updated not successfully");
			}
			return "home";

		}// end of updateprofile()

	}



	
}
